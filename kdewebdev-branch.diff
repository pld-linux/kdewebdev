Index: AUTHORS
===================================================================
--- AUTHORS	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ AUTHORS	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -12,8 +12,7 @@
       Nicolas Deschildre <ndeschildre@kdewebdev.org>
       Paulo Moura Guedes <moura@kdewebdev.org>
 
-    Home page:  http://quanta.sourceforge.net/
-    Download:   http://sourceforge.net/projects/quanta
+    Home page:  http://kdewebdev.org
     Bug form:   http://bugs.kde.org
 
 Kommander (kommander):
Index: quanta/project/projectupload.cpp
===================================================================
--- quanta/project/projectupload.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ quanta/project/projectupload.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -375,7 +375,7 @@
     buttonUpload->setEnabled(false);
     KURL u = *baseUrl;
     u.setPath(u.protocol() == "file" ? "/" : "");
-    if (QExtFileInfo::exists(u, false, this))
+    if (QExtFileInfo::exists(u, false, this) || (u.protocol() == "webdav" && QExtFileInfo::exists(*baseUrl, false, this)))
     {
       upload();
       return;
Index: lib/qextfileinfo.cpp
===================================================================
--- lib/qextfileinfo.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ lib/qextfileinfo.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -192,11 +192,11 @@
 {
   int i = 0;
   bool result;
-  KURL dir3; 
+  KURL dir3;
   KURL dir2;
   KURL dir1 = path;
   dir1.setPath("/");
-  if (!exists(dir1, false, window))
+  if (!exists(dir1, false, window) && path.protocol() != "webdav" )
   {
     return false; //the root is not accessible, possible wrong username/password supplied
   }
@@ -508,7 +508,7 @@
           u.setPath(u.directory(false, true) + linkDest);
           u.cleanPath();
         }
-        else       
+        else
           u.setPath(linkDest);
         u.adjustPath(+1);
         if (!dirListItems.contains(u) && u.url() != m_listStartURL && !u.isParentOf(item->url()))
Index: klinkstatus/src/engine/linkchecker.cpp
===================================================================
--- klinkstatus/src/engine/linkchecker.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ klinkstatus/src/engine/linkchecker.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -72,41 +72,43 @@
     KURL url(linkStatus()->absoluteUrl());
     Q_ASSERT(url.isValid());
 
-    if(url.hasRef())
-        checkRef();
+    if(url.hasRef()) {
+        KMimeType::Ptr mimeType = KMimeType::findByURL(url);
+        if(mimeType->is("text/html") || mimeType->is("application/xml")) {
+            checkRef();
+            return;
+        }
+    }
+        
+    t_job_ = KIO::get(url, false, false);
+
+    t_job_->addMetaData("PropagateHttpHeader", "true"); // to have the http header
+
+    if (linkstatus_->parent()) {
+        t_job_->addMetaData("referrer", linkstatus_->parent()->absoluteUrl().prettyURL());
+    }
+
+    if(search_manager_->sendIdentification())
+    {
+        t_job_->addMetaData("SendUserAgent", "true");
+        t_job_->addMetaData("UserAgent", search_manager_->userAgent());
+    }
     else
-    {
-        t_job_ = KIO::get
-                     (url, false, false);
+        t_job_->addMetaData("SendUserAgent", "false");
 
-        t_job_->addMetaData("PropagateHttpHeader", "true"); // to have the http header
 
-        if (linkstatus_->parent()) {
-            t_job_->addMetaData("referrer", linkstatus_->parent()->absoluteUrl().prettyURL());
-        }
+    QObject::connect(t_job_, SIGNAL(data(KIO::Job *, const QByteArray &)),
+                        this, SLOT(slotData(KIO::Job *, const QByteArray &)));
+    QObject::connect(t_job_, SIGNAL(mimetype(KIO::Job *, const QString &)),
+                        this, SLOT(slotMimetype(KIO::Job *, const QString &)));
+    QObject::connect(t_job_, SIGNAL(result(KIO::Job *)),
+                        this, SLOT(slotResult(KIO::Job *)));
+    QObject::connect(t_job_, SIGNAL(redirection(KIO::Job *, const KURL &)),
+                        this, SLOT(slotRedirection(KIO::Job *, const KURL &)));
 
-        if(search_manager_->sendIdentification())
-        {
-            t_job_->addMetaData("SendUserAgent", "true");
-            t_job_->addMetaData("UserAgent", search_manager_->userAgent());
-        }
-        else
-            t_job_->addMetaData("SendUserAgent", "false");
-        
-        
-        QObject::connect(t_job_, SIGNAL(data(KIO::Job *, const QByteArray &)),
-                         this, SLOT(slotData(KIO::Job *, const QByteArray &)));
-        QObject::connect(t_job_, SIGNAL(mimetype(KIO::Job *, const QString &)),
-                         this, SLOT(slotMimetype(KIO::Job *, const QString &)));
-        QObject::connect(t_job_, SIGNAL(result(KIO::Job *)),
-                         this, SLOT(slotResult(KIO::Job *)));
-        QObject::connect(t_job_, SIGNAL(redirection(KIO::Job *, const KURL &)),
-                         this, SLOT(slotRedirection(KIO::Job *, const KURL &)));
+    QTimer::singleShot( time_out_ * 1000, this, SLOT(slotTimeOut()) );
 
-        QTimer::singleShot( time_out_ * 1000, this, SLOT(slotTimeOut()) );
-        
-        t_job_->setInteractive(false);
-    }
+    t_job_->setInteractive(false);    
 }
 
 void LinkChecker::slotTimeOut()
Index: kommander/widget/functionlib.cpp
===================================================================
--- kommander/widget/functionlib.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widget/functionlib.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -120,6 +120,44 @@
   return params[0].toString().isEmpty();
 }
 
+static ParseNode f_stringSort(Parser*, const ParameterList& params)
+{
+  if (params.count() == 2 ) 
+  {
+    QStringList tmplst = QStringList::split(params[1].toString(), params[0].toString());
+    tmplst.sort();
+    return tmplst.join(params[1].toString());
+  } 
+  else 
+  {
+    QStringList tmplst = QStringList::split("\n", params[0].toString());
+    tmplst.sort();
+    return tmplst.join("\n");
+  }
+}
+static ParseNode f_stringTrim(Parser*, const ParameterList& params)
+{
+  return params[0].toString().stripWhiteSpace();
+}
+
+static ParseNode f_stringPadLeft(Parser*, const ParameterList& params)
+{
+  if (params.count() == 2 ) 
+    return params[0].toString().rightJustify(params[1].toInt(), ' ', false);
+  QString s = params[2].toString();
+  QChar ch = s.at(0);
+  return params[0].toString().rightJustify(params[1].toInt(), ch, false);
+}
+
+static ParseNode f_stringPadRight(Parser*, const ParameterList& params)
+{
+  if (params.count() == 2 ) 
+    return params[0].toString().leftJustify(params[1].toInt(), ' ', false);
+  QString s = params[2].toString();
+  QChar ch = s.at(0);
+  return params[0].toString().leftJustify(params[1].toInt(), ch, false);
+}
+
 static ParseNode f_stringSection(Parser*, const ParameterList& params)
 {
   return params[0].toString().section(params[1].toString(), params[2].toInt(), 
@@ -928,6 +966,10 @@
   registerFunction("str_toint", Function(&f_stringToInt, ValueString, ValueInt, 1));
   registerFunction("str_todouble", Function(&f_stringToDouble, ValueString, ValueDouble, 1));
   registerFunction("str_round", Function(&f_stringRound, ValueInt, ValueDouble, ValueInt, 2));
+  registerFunction("str_sort", Function(&f_stringSort, ValueString, ValueString, ValueString, 1, 2));
+  registerFunction("str_trim", Function(&f_stringTrim, ValueString, ValueString, 1));
+  registerFunction("str_padLeft", Function(&f_stringPadLeft, ValueString, ValueInt, ValueString, ValueString, 1, 2));
+  registerFunction("str_padRight", Function(&f_stringPadRight, ValueString, ValueInt, ValueString, ValueString, 1, 2));
   registerFunction("return", Function(&f_return, ValueNone, ValueString, 1, 1));
   registerFunction("debug", Function(&f_debug, ValueNone, ValueString, 1, 100));
   registerFunction("echo", Function(&f_echo, ValueNone, ValueString, 1, 100));
Index: kommander/widget/parsenode.h
===================================================================
--- kommander/widget/parsenode.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widget/parsenode.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -23,7 +23,7 @@
 {
   enum Keyword {For, To, Step, End, While, Do, Foreach, In, If, Then, Else, Elseif, Endif, Switch, Case, 
     Break, Continue, Exit, Dot, Semicolon, Comma, Assign, Less, LessEqual, Greater, GreaterEqual, Equal, NotEqual, 
-    Not, And, Or, False, True, LeftParenthesis, RightParenthesis, LeftBracket, RightBracket,
+    Not, And, Or, False, True, LeftParenthesis, RightParenthesis, LeftBracket, RightBracket, LeftCurlyBrace, RightCurlyBrace, PlusEqual,
     Plus, Minus, Multiply, Divide, Mod, LastRealKeyword = Mod, Variable, Invalid};
 
   enum KeywordGroup {GroupComparison, GroupAdd, GroupMultiply, GroupMisc};
Index: kommander/widget/parserdata.cpp
===================================================================
--- kommander/widget/parserdata.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widget/parserdata.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -59,6 +59,8 @@
   m_keywords["else"] =  Else;
   m_keywords["elseif"] =  Elseif;
   m_keywords["endif"] =  Endif;
+  m_keywords["{"] = LeftCurlyBrace;
+  m_keywords["}"] = RightCurlyBrace;
   m_keywords["switch"] =  Switch;
   m_keywords["case"] =  Case;
   m_keywords["while"] =  While;
@@ -96,6 +98,7 @@
   m_keywords["*"] = Multiply;
   m_keywords["/"] = Divide;
   m_keywords["%"] = Mod;
+  m_keywords["+="] = PlusEqual;
   m_keywords["mod"] = Mod;
   
   m_groups[Less] = GroupComparison;
Index: kommander/widget/parser.cpp
===================================================================
--- kommander/widget/parser.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widget/parser.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -499,6 +499,21 @@
     if (mode == Execute)
       setVariable(var, p);
   }
+  else if (tryKeyword(PlusEqual, CheckOnly))
+  {
+    ParseNode p = parseExpression(mode);
+    if (mode == Execute)
+    {
+      ParseNode p2 = variable(var);
+      if (p2.type() == ValueString)
+        p = QString(p2.toString() + p.toString());
+      else if (p2.type() == ValueDouble)
+        p = p2.toDouble() + p.toDouble();
+      else
+        p = p2.toInt() + p.toInt();
+      setVariable(var, p);
+    }
+  }
   else if (tryKeyword(Dot, CheckOnly))
   {
     QString value = variable(var).toString();
@@ -529,11 +544,14 @@
   ParseNode p = next();
   Flow flow = FlowStandard;
   bool matched = false;
+  bool thenFound = false;
   do {
     m_start++;
     Mode m = matched ? CheckOnly : mode;
     p = parseCondition(m);
-    tryKeyword(Then);
+    thenFound = tryKeyword(Then, CheckOnly);
+    if (!thenFound)
+      tryKeyword(LeftCurlyBrace);
     bool condition = !matched && p.toBool();
     if (condition)
     {
@@ -544,14 +562,21 @@
     else 
       parseBlock(CheckOnly);
     matched = matched || p.toBool();
+    if (!thenFound)
+      tryKeyword(RightCurlyBrace);
   } while (next().isKeyword(Elseif));
+  bool braceFound = false;
   if (tryKeyword(Else, CheckOnly))
   {
+    braceFound = tryKeyword(LeftCurlyBrace, CheckOnly);
     if (!matched)
       flow = parseBlock(mode);
     else
       parseBlock(CheckOnly);
   }
+  if (braceFound)
+    tryKeyword(RightCurlyBrace);
+  if (thenFound)
   tryKeyword(Endif);
   return flow;
 }
@@ -562,11 +587,13 @@
   int start = m_start;
   bool running = true;
   Parse::Flow flow = FlowStandard;
+  bool doFound = false;
   while (running)
   {
     m_start = start;
     ParseNode p = parseCondition(mode);
-    if (!tryKeyword(Do))
+    doFound = tryKeyword(Do, CheckOnly);
+    if (!doFound && !tryKeyword(LeftCurlyBrace))
       break;
     running = p.toBool();
     flow = parseBlock(running ? mode : CheckOnly);
@@ -575,7 +602,10 @@
   }
   if (flow != FlowExit)
   {
-    tryKeyword(End);
+    if (doFound)
+      tryKeyword(End);
+    else
+      tryKeyword(RightCurlyBrace);
     return FlowStandard;
   }
   else 
@@ -593,10 +623,13 @@
   int step = 1;
   if (tryKeyword(Step, CheckOnly))
     step = parseExpression(mode).toInt();
-  tryKeyword(Do);
+
+  bool doFound = tryKeyword(Do, CheckOnly);
+  if (!doFound)
+    tryKeyword(LeftCurlyBrace);
   int block = m_start;
   Parse::Flow flow = FlowStandard;
-  if (end >= start)
+  if (end >= start && step > 0)
   {
     for (int i = start; i <= end; i+=step)
     {
@@ -606,11 +639,24 @@
       if (flow == FlowBreak || flow == FlowExit)
         break;
     }
+  } else if (end <= start && step < 0)
+  {
+    for (int i = start; i >= end; i+=step)
+    {
+      m_start = block;
+      setVariable(var, ParseNode(i));
+      flow = parseBlock(mode);
+      if (flow == FlowBreak || flow == FlowExit)
+        break;
+    }
   } else
     parseBlock(Parse::CheckOnly);
   if (flow != FlowExit)
   {
-    tryKeyword(End);
+    if (doFound)
+      tryKeyword(End);
+    else
+      tryKeyword(RightCurlyBrace);
     return FlowStandard;
   }
   else 
@@ -623,7 +669,9 @@
   QString var = nextVariable();
   tryKeyword(In);
   QString arr = nextVariable();
-  tryKeyword(Do);
+  bool doFound = tryKeyword(Do, CheckOnly);
+  if (!doFound)
+    tryKeyword(LeftCurlyBrace);
   int start = m_start;
   Parse::Flow flow = FlowStandard;
   if (isArray(arr) && array(arr).count())
@@ -642,7 +690,10 @@
     parseBlock(CheckOnly);
   if (flow != FlowExit)
   {
-    tryKeyword(End);
+    if (doFound)
+      tryKeyword(End);
+    else
+      tryKeyword(RightCurlyBrace);
     return FlowStandard;
   }
   else 
@@ -655,6 +706,8 @@
   QString var = nextVariable();
   ParseNode caseValue = variable(var);
   bool executed = false;
+  bool braceFound = false;
+  braceFound = tryKeyword(LeftCurlyBrace, CheckOnly);
   tryKeyword(Semicolon, CheckOnly);
   while (tryKeyword(Case, CheckOnly))
   {
@@ -666,7 +719,10 @@
   }
   if (tryKeyword(Else, CheckOnly))
     parseBlock(executed ? CheckOnly : mode);
-  tryKeyword(End);
+  if (!braceFound)
+    tryKeyword(End);
+  else
+    tryKeyword(RightCurlyBrace);
 }
 
 Flow Parser::parseCommand(Mode mode)
@@ -740,7 +796,7 @@
     if (k == Dot)
       setError(i18n("Expected '%1'<br><br>Possible cause of the error is having a variable with the same name as a widget").arg(m_data->keywordToString(k)));
     else
-     setError(i18n("Expected '%1'").arg(m_data->keywordToString(k)));
+     setError(i18n("Expected '%1' got '%2'.").arg(m_data->keywordToString(k)).arg(next().toString()));
   }
   return false;
 }
Index: kommander/editor/mainwindow.cpp
===================================================================
--- kommander/editor/mainwindow.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/editor/mainwindow.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -463,6 +463,70 @@
 }
 
 
+void MainWindow::runForm4()
+{
+  if (previewing)
+  {
+    KMessageBox::information(this, i18n("There is a dialog already running."), i18n("Run"));
+    return;
+  }
+  FormWindow* form = activeForm();
+  if (!form || !form->formFile())
+    return;
+
+  QObjectList *editors = queryList("AssocTextEditor");
+  QObjectListIt it(*editors);
+  QObject *editor;
+
+  while ((editor = it.current()) != 0L) 
+  {
+    ++it;
+    static_cast<AssocTextEditor*>(editor)->save();
+  }
+  delete editors;  
+
+  if (form->formFile()->hasTempFileName())
+  {
+    if (!form->formFile()->saveAs())
+      return;
+  }
+
+  m_fileName = form->formFile()->fileName();
+  m_backupName = m_fileName + ".running";
+  m_modified = form->formFile()->isModified();
+    
+  bool readOnlyFile = !QFileInfo(m_fileName).isWritable();
+  struct stat statbuf;
+  ::stat(m_fileName.local8Bit(), &statbuf);
+  if (!readOnlyFile && !KIO::NetAccess::file_copy(KURL::fromPathOrURL(m_fileName), KURL::fromPathOrURL(m_backupName), statbuf.st_mode, true))
+  {
+    KMessageBox::error(this, i18n("<qt>Cannot create temporary file <i>%1</i>.</qt>").arg(m_backupName));
+    return;
+  }
+  form->formFile()->setFileName(m_fileName);  
+  if (!readOnlyFile || m_modified)
+    form->formFile()->setModified(true);
+  if (form->formFile()->save(false))
+  {
+    if (!readOnlyFile && !KIO::NetAccess::file_copy(KURL::fromPathOrURL(m_fileName), KURL::fromPathOrURL(m_fileName + ".backup"), statbuf.st_mode, true))
+    {
+      KMessageBox::error(this, i18n("<qt>Cannot create backup file <i>%1</i>.</qt>").arg(m_fileName + ".backup"));
+    }
+    ::chmod(m_fileName.local8Bit(), S_IRWXU);
+    KProcess* process = new KProcess;
+    process->setUseShell(true);
+    (*process) << "kommander" << QString("\"%1\"").arg(form->formFile()->fileName());
+    connect(process, SIGNAL(receivedStdout(KProcess*, char*, int)), messageLog,
+            SLOT(receivedStdout(KProcess*, char*, int)));
+    connect(process, SIGNAL(receivedStderr(KProcess*, char*, int)), messageLog,
+            SLOT(receivedStderr(KProcess*, char*, int)));
+    connect(process, SIGNAL(processExited(KProcess*)), SLOT(closeRunningForm(KProcess*)));  
+    messageLog->clear(MessageLog::All);
+    previewing = process->start(KProcess::NotifyOnExit, KProcess::AllOutput);
+  }
+}
+
+
 void MainWindow::closeRunningForm(KProcess* process)
 {
   previewing = false;
Index: kommander/editor/mainwindow.h
===================================================================
--- kommander/editor/mainwindow.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/editor/mainwindow.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -191,6 +191,7 @@
     void configureEditor();
 
     void runForm();
+    void runForm4();
     
 private slots:
     void activeWindowChanged( QWidget *w );
Index: kommander/editor/kommander-new.xml
===================================================================
--- kommander/editor/kommander-new.xml	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/editor/kommander-new.xml	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -138,6 +138,10 @@
       <item>str_toint</item>
       <item>str_todouble</item>
       <item>str_round</item>
+      <item>str_sort</item>
+      <item>str_trim</item>
+      <item>str_padLeft</item>
+      <item>str_padRight</item>
     </list>
     
     <list name="kmdrfile">
@@ -186,6 +190,7 @@
       <item> break </item>
       <item> continue </item>
       <item> exit </item>
+      <item> switch </item>
     </list>
     
     <list name="booleans">
@@ -239,6 +244,7 @@
         <RegExpr attribute="Keyword" context="#stay" String="\belseif&noword;" beginRegion="if" endRegion="if"/>
         <RegExpr attribute="Keyword" context="#stay" String="\belse&noword;"  beginRegion="if" endRegion="if"/>
         <RegExpr attribute="Keyword" context="#stay" String="\bendif&noword;" endRegion="if"/>
+        <RegExpr attribute="Keyword" context="#stay" String="\}&eos;" endRegion="group"/>
       	<!-- handle case as a special case -->
         <RegExpr attribute="Keyword" context="Case" String="\bcase&noword;" beginRegion="case" />
         <!-- handle command line options -->
@@ -273,6 +279,8 @@
         <DetectChar attribute="Normal Text" context="#pop" char=")" lookAhead="true"/>
         <DetectChar attribute="Normal Text" context="#pop" char="[" lookAhead="true"/>
         <DetectChar attribute="Normal Text" context="#pop" char="]" lookAhead="true"/>
+        <DetectChar attribute="Normal Text" context="#pop" char="{" lookAhead="true"/>
+        <DetectChar attribute="Normal Text" context="#pop" char="}" lookAhead="true"/>
         <DetectChar attribute="KmdrMethod" context="DetectKmdrMethod" char="." lookAhead="true"/>
         <RegExpr attribute="Normal Text" context="#pop" String="[\s\=\;\+\-\*\/\%]+" />
      
Index: kommander/editor/mainwindowactions.cpp
===================================================================
--- kommander/editor/mainwindowactions.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/editor/mainwindowactions.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -476,6 +476,14 @@
   connect(this, SIGNAL(hasActiveForm(bool)), a, SLOT(setEnabled(bool)));
   a->plug(fileTb);
   a->plug(menu);
+  // add KDE4 executor
+
+  KAction* b = new KAction(i18n("Run Dialog K4"), "launch", CTRL + SHIFT  + Qt::Key_R,
+                           this, SLOT(runForm4()), actionCollection(), "run4");
+  b->setToolTip(i18n("Executes dialog in KDE4"));
+  b->setWhatsThis(whatsThisFrom("Run|Run dialog"));
+  connect(this, SIGNAL(hasActiveForm(bool)), b, SLOT(setEnabled(bool)));
+  b->plug(menu);
 }
 
 void MainWindow::setupWindowActions()
Index: kommander/plugin/specialinformation.cpp
===================================================================
--- kommander/plugin/specialinformation.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/plugin/specialinformation.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -379,6 +379,10 @@
      i18n("Return the widget's geometry as <i>x y w h</i>. This is useful for positioning a created widget."), 1);
   insertInternal(DCOP::hasFocus, "hasFocus(QString widget)", 
      i18n("Returns true if the widget has focus."), 1);
+  insertInternal(DCOP::getBackgroundColor, "getBackgroundColor(QString widget)", 
+      i18n("Gets the widget's background color."), 1);
+  insertInternal(DCOP::setBackgroundColor, "setBackgroundColor(QString widget, QString Color)", 
+      i18n("Sets the widget's background color. Colors can be by name, like blue, or in hex like #0000ff for blue. Use the color dialog or a color picker if unsure."), 2);
 
   insertGroup(Group::Slots, i18n("Slots"), "");
 
@@ -518,6 +522,14 @@
     i18n("Returns the given string with %1, %2, %3 replaced with <i>arg1</i>, <i>arg2</i>, <i>arg3</i> accordingly."), 2);
   insert(String::round, "round(QString Number, int Digits)", 
     i18n("Round a floating point number by x digits."), 2);
+  insertInternal(String::sort, "sort(QString String, QString Separator)", 
+    i18n("Sort a string list. Only first paramter is required. Default separator is a newline."), 1, 2);
+  insertInternal(String::trim, "trim(QString String)", 
+    i18n("Strips white space from beginning and end of string."), 1);
+  insertInternal(String::padLeft, "padLeft(QString String, int Length, QString Pad)", 
+    i18n("Pads the string to the total length indicated. if no pad character is given spaces will be used. Try this with 0 on integer sequences and read them with str_toint."), 1, 2);
+  insertInternal(String::padRight, "padRight(QString String, int Length, QString Pad)", 
+    i18n("Pads the string to the total length indicated. if no pad character is given spaces will be used."), 1, 2);
 
   insertInternal(String::toInt, "toint(QString string, QString default)",
     i18n("Convert a string to an integer. If not possible use the default value"), 1, 2);
@@ -543,7 +555,7 @@
   insert(Input::value, "value(QString caption, QString label, int value, int min, int max, int step)", 
          i18n("Shows value selection dialog. Returns entered value."), 5);
   insert(Input::valueDouble, "double(QString caption, QString label, double value, double min, double max, double step)", 
-         i18n("Shows float value selection dialog. Returns entered value."), 5);
+         i18n("Shows float value selection dialog. Returns entered value."), 6);
   insert(Input::openfile, "openfile(QString startdir, QString filter, QString caption)", 
          i18n("Shows existing file selection dialog. Returns selected file."), 0);
   insert(Input::savefile, "savefile(QString startdir, QString filter, QString caption)", 
Index: kommander/plugin/specials.h
===================================================================
--- kommander/plugin/specials.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/plugin/specials.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -32,7 +32,7 @@
     currentItem, currentRow, execute, findItem, global, insertColumn, insertItem, insertItems, insertRow, 
     item, itemDepth, itemPath, removeColumn, removeItem, removeRow, selection, setAssociatedText, setChecked, 
     setCellText, setCurrentItem, insertTab, setColumnCaption, setEnabled, setGlobal, setMaximum, setPixmap, 
-    setRowCaption, setSelection, setText, 
+    setRowCaption, setSelection, setText, getBackgroundColor, setBackgroundColor,
     setVisible, text, type, setCellWidget, cellWidget, setEditable, geometry, hasFocus};
 }
 
@@ -40,7 +40,7 @@
 {
   enum {widgetText, selectedWidgetText, null, pid, dcopid, parentPid, debug,
   echo, env, exec, expr, global, i18n, dialog, readSetting, setGlobal, writeSetting, dcop,
-  switchBlock, execBegin, forBlock, forEachBlock, ifBlock, comment, createWidget, connect, disconnect, widgetExists, exit, Break, Continue, Return, execBackground};
+  switchBlock, execBegin, forBlock, forEachBlock, ifBlock, comment, createWidget, connect, disconnect, widgetExists, exit, Break, Continue, Return, execBackground}; //, focusWidget};
 }
 
 namespace Array
@@ -51,7 +51,7 @@
 namespace String
 {
   enum {length, contains, find, findRev, left, right, mid, remove, replace, upper, lower,
-  compare, isEmpty, isNumber, section, args, toInt, toDouble, round};
+  compare, isEmpty, isNumber, section, args, toInt, toDouble, round, sort, trim, padLeft, padRight};
 }
 
 namespace File
Index: kommander/widgets/treewidget.cpp
===================================================================
--- kommander/widgets/treewidget.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/treewidget.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -143,6 +143,8 @@
 
 int TreeWidget::itemToIndex(QListViewItem* item)
 {
+  if (!item->isSelected())
+    return -1;
   QListViewItemIterator it(this);
   int index = 0;
   while (it.current()) {
@@ -154,6 +156,19 @@
   return -1;
 }
 
+int TreeWidget::itemToIndexSafe(QListViewItem* item)
+{
+  QListViewItemIterator it(this);
+  int index = 0;
+  while (it.current()) {
+    if (it.current() == item)
+      return index;
+    ++it;
+    ++index;
+  }
+  return -1;
+}
+
 QListViewItem* TreeWidget::indexToItem(int item)
 {
   QListViewItemIterator it(this);
@@ -286,7 +301,7 @@
   return f == DCOP::insertItem || f == DCOP::text || f == DCOP::setText || f == DCOP::insertItems ||
     f == DCOP::selection || f == DCOP::setSelection || f == DCOP::clear || f == DCOP::removeItem || 
     f == DCOP::currentItem || f == DCOP::setCurrentItem || f == DCOP::findItem || f == DCOP::item || 
-      f == DCOP::itemPath || f == DCOP::itemDepth || f == DCOP::setPixmap || f == DCOP::setColumnCaption || f == DCOP::removeColumn || f == DCOP::columnCount || f == DCOP::geometry || f == DCOP::hasFocus  || (f > FirstFunction && f < LastFunction) || (f >= TW_FUNCTION && f <= TW_LAST_FUNCTION);
+      f == DCOP::itemPath || f == DCOP::itemDepth || f == DCOP::setPixmap || f == DCOP::setColumnCaption || f == DCOP::removeColumn || f == DCOP::columnCount || f == DCOP::geometry || f == DCOP::hasFocus || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor  || (f > FirstFunction && f < LastFunction) || (f >= TW_FUNCTION && f <= TW_LAST_FUNCTION);
 }
 
 QString TreeWidget::handleDCOP(int function, const QStringList& args)
@@ -315,7 +330,7 @@
       {
         if (it.current()->isSelected())
         {        
-          selection.append(QString("%1\n").arg(itemToIndex(it.current())));
+          selection.append(QString("%1\n").arg(itemToIndexSafe(it.current())));
         }
         ++it;
       }
@@ -373,17 +388,17 @@
       break;
     case DCOP::findItem:
       if (!args[1])
-        return QString::number(itemToIndex(findItem(args[0], 0)));
+        return QString::number(itemToIndexSafe(findItem(args[0], 0)));
       else
       {
         if (args[2].toUInt() && args[3].toUInt())
-          return QString::number(itemToIndex(findItem(args[0], args[1].toInt())));
+          return QString::number(itemToIndexSafe(findItem(args[0], args[1].toInt())));
         else if (args[2].toUInt())
-          return QString::number(itemToIndex(findItem(args[0], args[1].toInt(), Qt::CaseSensitive | Qt::Contains)));
+          return QString::number(itemToIndexSafe(findItem(args[0], args[1].toInt(), Qt::CaseSensitive | Qt::Contains)));
         else if (args[3].toUInt())
-          return QString::number(itemToIndex(findItem(args[0], args[1].toInt(), Qt::ExactMatch)));
+          return QString::number(itemToIndexSafe(findItem(args[0], args[1].toInt(), Qt::ExactMatch)));
         else
-          return QString::number(itemToIndex(findItem(args[0], args[1].toInt(), Qt::Contains)));
+          return QString::number(itemToIndexSafe(findItem(args[0], args[1].toInt(), Qt::Contains)));
       }
       break;
     case DCOP::item:
@@ -415,6 +430,16 @@
       if (columns() >= args[0].toInt())
         setColumnText(args[0].toInt(), args[1]);
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     case addColumnTree:
       return QString::number(KListView::addColumn(args[0], args[1].toInt()));
       break;
Index: kommander/widgets/execbutton.cpp
===================================================================
--- kommander/widgets/execbutton.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/execbutton.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -154,9 +154,16 @@
   emit widgetOpened();
 }
 
+void ExecButton::contextMenuEvent( QContextMenuEvent * e )
+{
+  e->accept();
+  QPoint p = e->globalPos();
+  emit contextMenuRequested(p.x(), p.y());
+}
+
 bool ExecButton::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::execute || f == DCOP::geometry;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::execute || f == DCOP::geometry || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 QString ExecButton::handleDCOP(int function, const QStringList& args)
@@ -176,6 +183,16 @@
       return geo;
       break;
     }
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/textbrowser.cpp
===================================================================
--- kommander/widgets/textbrowser.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/textbrowser.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -14,14 +14,25 @@
  *                                                                         *
  ***************************************************************************/
 
+/* KDE INCLUDES */
+#include <klocale.h>
+
 /* QT INCLUDES */
 #include <qstringlist.h>
 #include <qevent.h>
+#include <qstring.h>
 
 /* OTHER INCLUDES */
+#include "kommanderplugin.h"
 #include <specials.h>
 #include "textbrowser.h"
-
+/*
+enum Functions {
+  FirstFunction = 420,
+  TBR_scrollToAnchor,
+  LastFunction
+};
+*/
 TextBrowser::TextBrowser(QWidget * a_parent, const char *a_name)
   : KTextBrowser(a_parent, a_name), KommanderWidget((QObject *) this)
 {
@@ -29,6 +40,8 @@
   states << "default";
   setStates(states);
   setDisplayStates(states);
+//  KommanderPlugin::setDefaultGroup(Group::DCOP);
+//  KommanderPlugin::registerFunction(TBR_scrollToAnchor, "scrollToAnchor(QString widget, QString name)",i18n("Scroll to an anchor in the form of <a href name=\"#anchor\">anchor</a>"), 2, 2);
 }
 
 QString TextBrowser::currentState() const
@@ -93,6 +106,7 @@
 bool TextBrowser::isFunctionSupported(int f)
 {
   return f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::clear;
+// || (f >= FirstFunction && f <= LastFunction);
 }
 
 QString TextBrowser::handleDCOP(int function, const QStringList& args)
@@ -105,6 +119,8 @@
       break;
     case DCOP::selection:
       return selectedText();
+//    case TBR_scrollToAnchor:
+//      KTextBrowser::scrollToAnchor(args[0]);
     case DCOP::clear:
       clear();
       break;
Index: kommander/widgets/aboutdialog.cpp
===================================================================
--- kommander/widgets/aboutdialog.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/aboutdialog.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -224,6 +224,15 @@
   setAssociatedText(KommanderWidget::evalAssociatedText( populationText()));
 }
 
+void AboutDialog::execute()
+{
+  if (m_aboutData)
+  {        
+    KAboutApplication dialog(m_aboutData, this);
+    dialog.exec();
+  }
+}
+
 QString AboutDialog::handleDCOP(int function, const QStringList& args)
 {
   switch (function) {
Index: kommander/widgets/textedit.cpp
===================================================================
--- kommander/widgets/textedit.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/textedit.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -30,6 +30,15 @@
 enum Functions {
   FirstFunction = 450, //CHANGE THIS NUMBER TO AN UNIQUE ONE!!!
   TE_isModified,
+  TE_selectText,
+  TE_paragraphs,
+  TE_length,
+//  TE_getCursorPosition,
+  TE_paragraphLength,
+  TE_linesOfParagraph,
+  TE_findText,
+  TE_VAsuperScript,
+  TE_VAnormalScript,
   LastFunction
 };
 
@@ -45,6 +54,16 @@
 
   KommanderPlugin::setDefaultGroup(Group::DCOP);
   KommanderPlugin::registerFunction(TE_isModified, "isModified(QString widget)",  i18n("see if widget has been modified."), 1);
+  KommanderPlugin::registerFunction(TE_selectText, "selectText(QString widget, int paraFrom, int indexFrom, int paraTo, int indexTo)",  i18n("Select a block of text using the paragraph number and character index of the line. You can use the cursorPositionChanged(int, int) signal to get this data in real time into a script."), 5);
+  KommanderPlugin::registerFunction(TE_findText, "findText(QString widget, QString Text, bool Case-Sensitive, bool Forward)",  i18n("Search for text from the cursor or a specified position. You can specifiy case sensitive search and forward or backward."), 5);
+//  KommanderPlugin::registerFunction(TE_findText, "findText(QString widget, QString Text, bool Case-Sensitive, bool Forward, int Paragraph, int Index)",  i18n("Search for text from the cursor or a specified position. You can specifiy case sensitive search and forward or backward."), 5, 7);
+  KommanderPlugin::registerFunction(TE_paragraphs, "paragraphs(QString widget)",  i18n("Get the number of paragraphs in the widget."), 1);
+  KommanderPlugin::registerFunction(TE_length, "length(QString widget)",  i18n("Get the total length of all text."), 1);
+//  KommanderPlugin::registerFunction(TE_getCursorPosition, "getCursorPosition(QString widget)",  i18n("Get the cursor postion in the form of paragraph and postion integers."), 1);
+  KommanderPlugin::registerFunction(TE_paragraphLength, "paragraphLength(QString widget, int Paragraph)",  i18n("Get the length of the paragraph."), 2);
+  KommanderPlugin::registerFunction(TE_linesOfParagraph, "linesOfParagraph(QString widget, int Paragraph)",  i18n("Get the number of lines in the paragraph."), 2);
+  KommanderPlugin::registerFunction(TE_VAsuperScript, "setSuperScript(QString widget)",  i18n("Use to set superscript."), 1);
+  KommanderPlugin::registerFunction(TE_VAnormalScript, "setNormalScript(QString widget)",  i18n("Use to revert from superscript to normal script."), 1);
 }
 
 QString TextEdit::currentState() const
@@ -124,7 +143,7 @@
 
 bool TextEdit::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::setSelection || f == DCOP::clear || f == DCOP::setEditable || f == DCOP::geometry || f == DCOP::hasFocus || (f >= FirstFunction && f <= LastFunction);
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::setSelection || f == DCOP::clear || f == DCOP::setEditable || f == DCOP::geometry || f == DCOP::hasFocus || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor || (f >= FirstFunction && f <= LastFunction);
 }
 
 QString TextEdit::handleDCOP(int function, const QStringList& args)
@@ -146,9 +165,48 @@
     case DCOP::setEditable:
       setReadOnly(args[0] == "false" || args[0] == "0");
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     case TE_isModified:
       return isModified() ? "1" : "0";
       break;
+    case TE_selectText:
+      QTextEdit::setSelection(args[0].toInt(), args[1].toInt(), args[2].toInt(), args[3].toInt());
+      break;
+    case TE_length:
+      return QString::number(QTextEdit::length() );
+      break;
+    /*case TE_getCursorPosition:
+      return QString::number(QTextEdit::getCursorPosition() );
+      break;*/
+    case TE_paragraphLength:
+      return QString::number(QTextEdit::paragraphLength(args[0].toInt() ) );
+      break;
+    case TE_linesOfParagraph:
+      return QString::number(QTextEdit::linesOfParagraph(args[0].toInt() ) );
+      break;
+    case TE_findText:
+    {
+//      int para = args[3].toInt();
+//      int idx = args[4].toInt();
+//      return QString::number(QTextEdit::find(args[0], args[1].toUInt(), false, args[2].toUInt(), para, idx ));
+      return QString::number(QTextEdit::find(args[0], args[1].toUInt(), false ));
+      break;
+    }
+    case TE_VAsuperScript:
+      break;
+      QTextEdit::setVerticalAlignment(AlignSuperScript);
+    case TE_VAnormalScript:
+      QTextEdit::setVerticalAlignment(AlignNormal);
+      break;
     case DCOP::geometry:
     {
       QString geo = QString::number(this->x())+" "+QString::number(this->y())+" "+QString::number(this->width())+" "+QString::number(this->height());
Index: kommander/widgets/dialog.cpp
===================================================================
--- kommander/widgets/dialog.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/dialog.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -14,6 +14,7 @@
  *                                                                         *
  ***************************************************************************/
 /* KDE INCLUDES */
+#include <klocale.h>
 
 /* QT INCLUDES */
 #include <qstring.h>
@@ -22,12 +23,23 @@
 #include <qevent.h>
 #include <qdialog.h>
 #include <qpoint.h>
+#include <qcursor.h>
+#include <qapplication.h>
 
 /* OTHER INCLUDES */
 #include <specials.h>
 #include "dialog.h"
 #include <myprocess.h>
+#include "kommanderplugin.h"
 
+enum Functions {
+  FirstFunction = 185,
+  D_focusWidget,
+  D_waitCursor,
+  D_restoreCursor,
+  LastFunction
+};
+
 Dialog::Dialog(QWidget *a_parent, const char *a_name, bool a_modal, int a_flags)
   : QDialog(a_parent, a_name, a_modal, a_flags), KommanderWindow(this)
 {
@@ -40,6 +52,10 @@
   m_useShebang = false;
   m_shebang = "#!/usr/bin/kmdr-executor";
   m_firstShow = true;
+  KommanderPlugin::setDefaultGroup(Group::DCOP);
+  KommanderPlugin::registerFunction(D_focusWidget, "focusWidget(QString widget)",  i18n("The name of the widget having focus"), 1);
+  KommanderPlugin::registerFunction(D_waitCursor, "waitCursor(QString widget)",  i18n("Set a wait cursor. CAUTION: if set more than once an equal number of calls to restore must be made to clear it."), 1);
+  KommanderPlugin::registerFunction(D_restoreCursor, "restoreCursor(QString widget)",  i18n("Restore normal curser. NOTE: must be called as many times as wait was."), 1);
 }
 
 Dialog::~Dialog()
@@ -177,7 +193,7 @@
 
 bool Dialog::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::geometry;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::geometry || (f > FirstFunction && f < LastFunction);
 }
 
 QString Dialog::handleDCOP(int function, const QStringList& args)
@@ -191,6 +207,15 @@
     case DCOP::geometry:
       return QString::number(this->x())+" "+QString::number(this->y())+" "+QString::number(this->width())+" "+QString::number(this->height());
       break;
+    case D_focusWidget:
+      return focusWidget()->name();
+      break;
+    case D_waitCursor:
+      QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
+      break;
+    case D_restoreCursor:
+      QApplication::restoreOverrideCursor();
+      break;
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/spinboxint.h
===================================================================
--- kommander/widgets/spinboxint.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/spinboxint.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -56,8 +56,12 @@
 signals:
   void widgetOpened();
   void widgetTextChanged(const QString&);
+  void lostFocus();
+  void gotFocus();
 protected:
   void showEvent(QShowEvent *e);
+  void focusOutEvent( QFocusEvent* e);
+  void focusInEvent( QFocusEvent* e);
 private:
 };
 
Index: kommander/widgets/lineedit.h
===================================================================
--- kommander/widgets/lineedit.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/lineedit.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -60,10 +60,12 @@
   void widgetTextChanged(const QString &);
   void contextMenuRequested(int xpos, int ypos);
   void gotFocus();
+  void lostFocus();
 protected:
   virtual void showEvent( QShowEvent *e );
   void contextMenuEvent( QContextMenuEvent * e );
   void focusInEvent( QFocusEvent* e);
+  void focusOutEvent( QFocusEvent* e);
 private:
 };
 
Index: kommander/widgets/execbutton.h
===================================================================
--- kommander/widgets/execbutton.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/execbutton.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -77,8 +77,10 @@
 signals:
   void widgetOpened();
   void widgetTextChanged(const QString&);
-  
+  void contextMenuRequested(int xpos, int ypos);
+
 protected:
+  void contextMenuEvent( QContextMenuEvent * e );
   // Whether output from process should be put in real stdout
   bool m_writeStdout;
   // Whether pressing execubtton should block GUI until process ends
Index: kommander/widgets/table.h
===================================================================
--- kommander/widgets/table.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/table.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -52,12 +52,14 @@
     virtual QString handleDCOP(int function, const QStringList& args);
     virtual bool isFunctionSupported(int function);
     virtual void clearCellWidget(int row, int col);
+    virtual void columnClicked(int col);
   public slots:
     virtual void populate();
     virtual void setWidgetText(const QString &);
     //void adjustColumn(int col);
   signals:
     void contextMenuRequested(int xpos, int ypos);
+    void columnHeaderClicked(int col);
   protected:
     void contextMenuEvent( QContextMenuEvent * e );
   private:
Index: kommander/widgets/spinboxint.cpp
===================================================================
--- kommander/widgets/spinboxint.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/spinboxint.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -87,9 +87,21 @@
   emit widgetOpened();
 }
 
+void SpinBoxInt::focusOutEvent( QFocusEvent * e)
+{
+  QSpinBox::focusOutEvent(e);
+  emit lostFocus();
+}
+
+void SpinBoxInt::focusInEvent( QFocusEvent * e)
+{
+  QSpinBox::focusInEvent(e);
+  emit gotFocus();
+}
+
 bool SpinBoxInt::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::setMaximum;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::setMaximum || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 QString SpinBoxInt::handleDCOP(int function, const QStringList& args)
@@ -103,6 +115,16 @@
     case DCOP::setMaximum:
       setMaxValue(args[0].toUInt());
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/lineedit.cpp
===================================================================
--- kommander/widgets/lineedit.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/lineedit.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -46,6 +46,12 @@
   emit gotFocus();
 }
 
+void LineEdit::focusOutEvent( QFocusEvent * e)
+{
+  QLineEdit::focusOutEvent(e);
+  emit gotFocus();
+}
+
 QString LineEdit::currentState() const
 {
   return QString("default");
@@ -107,7 +113,7 @@
 bool LineEdit::isFunctionSupported(int f)
 {
   return f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::setSelection ||
-    f == DCOP::clear || f == DCOP::setEditable || f == DCOP::geometry || f == DCOP::hasFocus ;
+    f == DCOP::clear || f == DCOP::setEditable || f == DCOP::geometry || f == DCOP::hasFocus || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor ;
 }
 
 QString LineEdit::handleDCOP(int function, const QStringList& args)
@@ -138,6 +144,16 @@
     case DCOP::hasFocus:
       return QString::number(this->hasFocus());
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/aboutdialog.h
===================================================================
--- kommander/widgets/aboutdialog.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/aboutdialog.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -43,6 +43,7 @@
 
 public slots:
   virtual void populate();
+  virtual void execute();
 
 private:
   void initialize(const QString& appName, const QString &icon, const QString& version, const QString& copyright);  
Index: kommander/widgets/scriptobject.h
===================================================================
--- kommander/widgets/scriptobject.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/scriptobject.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -52,6 +52,7 @@
   virtual void populate();
   virtual void execute();
   virtual void execute(const QString&);
+  virtual void execute(const QString&, const QString&);
   virtual void execute(int);
   virtual void execute(int, int);
   virtual void execute(bool);
Index: kommander/widgets/groupbox.cpp
===================================================================
--- kommander/widgets/groupbox.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/groupbox.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -23,11 +23,14 @@
 #include <qevent.h>
 #include <qgroupbox.h>
 #include <qobjectlist.h>
+#include <klocale.h>
 
 /* OTHER INCLUDES */
+#include "kommanderplugin.h"
 #include <specials.h>
 #include "groupbox.h"
 
+
 GroupBox::GroupBox(QWidget *a_parent, const char *a_name)
   : QGroupBox(a_parent, a_name), KommanderWidget(this)
 {
@@ -105,7 +108,8 @@
 
 bool GroupBox::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
+// || (f >= FirstFunction && f <= LastFunction);
 }
 
 QString GroupBox::handleDCOP(int function, const QStringList& args)
@@ -122,6 +126,16 @@
     case DCOP::setText:
       setTitle(args[0]);
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/combobox.cpp
===================================================================
--- kommander/widgets/combobox.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/combobox.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -30,7 +30,7 @@
 #include "combobox.h"
 
 enum Functions {
-  FirstFunction = 355, //CHANGE THIS NUMBER TO AN UNIQUE ONE!!!
+  FirstFunction = 357, //CHANGE THIS NUMBER TO AN UNIQUE ONE!!!
   popupList,
   LastFunction
 };
@@ -121,7 +121,7 @@
   return f == DCOP::text || f == DCOP::selection || f == DCOP::setSelection ||
       f == DCOP::currentItem || f == DCOP::setCurrentItem || f == DCOP::item || 
       f == DCOP::removeItem || f == DCOP::insertItem || f == DCOP::insertItems ||
-      f == DCOP::addUniqueItem || f == DCOP::clear || f == DCOP::count || f == DCOP::setEditable || f == DCOP::geometry || f == DCOP::hasFocus  || (f >= FirstFunction && f <= LastFunction);
+      f == DCOP::addUniqueItem || f == DCOP::clear || f == DCOP::count || f == DCOP::setEditable || f == DCOP::geometry || f == DCOP::hasFocus || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor || (f >= FirstFunction && f <= LastFunction);
 }
 
 QString ComboBox::handleDCOP(int function, const QStringList& args)
@@ -179,6 +179,16 @@
     case DCOP::setEditable:
       setEditable(args[0] != "false" && args[0] != "0");
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     case popupList:
       QComboBox::popup();
       break;
Index: kommander/widgets/statusbar.cpp
===================================================================
--- kommander/widgets/statusbar.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/statusbar.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -91,7 +91,7 @@
 
 bool StatusBar::isFunctionSupported(int f)
 {
-  return f == DCOP::setText || f == DCOP::insertItem || f == DCOP::removeItem || f == DCOP::clear;
+  return f == DCOP::setText || f == DCOP::insertItem || f == DCOP::removeItem || f == DCOP::clear || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 QString StatusBar::handleDCOP(int function, const QStringList& args)
@@ -112,6 +112,16 @@
     case DCOP::clear:
       clear();
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/slider.cpp
===================================================================
--- kommander/widgets/slider.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/slider.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -84,7 +84,7 @@
 
 bool Slider::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::clear || f == DCOP::setMaximum;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::clear || f == DCOP::setMaximum || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 QString Slider::handleDCOP(int function, const QStringList& args)
@@ -101,6 +101,16 @@
     case DCOP::setMaximum:
       setMaxValue(args[0].toInt());
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/table.cpp
===================================================================
--- kommander/widgets/table.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/table.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -41,6 +41,8 @@
   TBL_setColumnReadOnly,
   TBL_setRowReadOnly,
   TBL_rowCount,
+  TBL_colHeader,
+  TBL_rowHeader,
   LastFunction
 };
 
@@ -61,6 +63,8 @@
   KommanderPlugin::registerFunction(TBL_setColumnReadOnly, "setColumnReadOnly(QString widget, int col, bool Readonly)", i18n("Set the column read only using zero based index.<br /><b>Not guaranteed to have KDE4 compatiblility</b>"), 3);
   KommanderPlugin::registerFunction(TBL_setRowReadOnly, "setRowReadOnly(QString widget, int row, bool Readonly)", i18n("Set the row read only using zero based index.<br /><b>Not guaranteed to have KDE4 compatiblility</b>"), 3);
   KommanderPlugin::registerFunction(TBL_rowCount, "rowCount(QString widget)", i18n("Returns the number of rows of the table"), 1);
+  KommanderPlugin::registerFunction(TBL_colHeader, "columnHeader(QString widget, int Column)", i18n("Returns the text of the header for the column index"), 2);
+  KommanderPlugin::registerFunction(TBL_rowHeader, "rowHeader(QString widget, int Row)", i18n("Returns the text of the header for the row index"), 2);
 
 }
 
@@ -119,7 +123,7 @@
   return f == DCOP::currentColumn || f == DCOP::currentRow || f == DCOP::insertColumn || 
       f == DCOP::insertRow || f == DCOP::cellText || f == DCOP::setCellText || f == DCOP::setCellWidget || f == DCOP::cellWidget || f == DCOP::columnCount ||
       f == DCOP::removeRow || f == DCOP::removeColumn || f == DCOP::setColumnCaption ||
-      f == DCOP::setRowCaption || f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::geometry || f == DCOP::hasFocus  || (f >= FirstFunction && f <= LastFunction);
+      f == DCOP::setRowCaption || f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::geometry || f == DCOP::hasFocus || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor  || (f >= FirstFunction && f <= LastFunction);
 }
 
 void Table::setCellWidget(int row, int col, const QString & _widgetName)
@@ -180,15 +184,16 @@
   QPoint p = e->globalPos();
   emit contextMenuRequested(p.x(), p.y());
 }
-/*
-void Table::adjustColumn(int col)
+
+void Table::columnClicked(int col)
 {
-  if (numRows() >= col)
-    QTable::adjustColumn(col);
-  else
-    KMessageBox::error(this, "Attempted to size nonexistant column");
+  emit columnHeaderClicked(col);
+  static bool ascending = TRUE;
+  if (!sorting()) return;
+  ascending=!ascending;
+  sortColumn( col, ascending, TRUE);
 }
-*/
+
 QString Table::handleDCOP(int function, const QStringList& args)
 {
   switch (function) 
@@ -293,27 +298,62 @@
     case DCOP::selection:
       return selectedArea();
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     case TBL_sortColumnExtra:
-      QTable::sortColumn(args[0].toInt(), args[1].toInt(), args[2].toInt());
+      if (numCols() >= args[0].toInt())
+        QTable::sortColumn(args[0].toInt(), args[1].toInt(), args[2].toInt());
       break;
     case TBL_keepCellVisible:
-      QTable::ensureCellVisible(args[0].toInt()-1, args[1].toInt()-1);
+      if (numRows() >= args[0].toInt() && numCols() >+ args[1].toInt())
+        QTable::ensureCellVisible(args[0].toInt()-1, args[1].toInt()-1);
       break;
     case   TBL_selectCells:
-      QTable::selectCells (args[0].toInt(), args[1].toInt(), args[2].toInt(), args[3].toInt());
+      if (numRows() >= args[0].toInt() && numCols() >+ args[1].toInt() && numRows() >= args[2].toInt() && numCols() >+ args[3].toInt())
+        QTable::selectCells (args[0].toInt(), args[1].toInt(), args[2].toInt(), args[3].toInt());
       break;
     case TBL_selectRow:
-      QTable::selectRow (args[0].toInt());
+      if (numRows() >= args[0].toInt())
+        QTable::selectRow (args[0].toInt());
       break;
     case TBL_selectColumn:
-      QTable::selectColumn (args[0].toInt());
+      if (numCols() >= args[0].toInt())
+        QTable::selectColumn (args[0].toInt());
       break;
     case TBL_setColumnReadOnly:
-      QTable::setColumnReadOnly (args[0].toInt(), args[1].toUInt());
+      if (numCols() >= args[0].toInt())
+        QTable::setColumnReadOnly (args[0].toInt(), args[1].toUInt());
       break;
     case TBL_setRowReadOnly:
-      QTable::setRowReadOnly (args[0].toInt(), args[1].toUInt());
+      if (numRows() >= args[0].toInt())
+        QTable::setRowReadOnly (args[0].toInt(), args[1].toUInt());
       break;
+    case TBL_colHeader:
+    {
+      QHeader* hdr = QTable::horizontalHeader();
+      if (numCols() >= args[0].toInt())
+        return hdr->label(args[0].toInt());
+      else
+        return "No column at index "+args[0];
+      break;
+    }
+    case TBL_rowHeader:
+    {
+      QHeader* hdr = QTable::verticalHeader();
+      if (numRows() >= args[0].toInt())
+        return hdr->label(args[0].toInt());
+      else
+        return "No row at index "+args[0];
+      break;
+    }
     case DCOP::geometry:
     {
       QString geo = QString::number(this->x())+" "+QString::number(this->y())+" "+QString::number(this->width())+" "+QString::number(this->height());
Index: kommander/widgets/progressbar.cpp
===================================================================
--- kommander/widgets/progressbar.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/progressbar.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -14,6 +14,7 @@
  ***************************************************************************/
 
 /* KDE INCLUDES */
+#include <klocale.h>
 
 /* QT INCLUDES */
 #include <qobject.h>
@@ -25,7 +26,15 @@
 /* OTHER INCLUDES */
 #include <specials.h>
 #include "progressbar.h"
+#include "kommanderplugin.h"
 
+enum Functions {
+  FirstFunction = 585,
+  PB_setHighlightColor,
+  PB_setHightlightTextColor,
+  LastFunction
+};
+
 ProgressBar::ProgressBar(QWidget *a_parent, const char *a_name)
   : KProgress(a_parent, a_name), KommanderWidget(this)
 {
@@ -33,6 +42,9 @@
   states << "default";
   setStates(states);
   setDisplayStates(states);
+  KommanderPlugin::setDefaultGroup(Group::DCOP);
+  KommanderPlugin::registerFunction(PB_setHighlightColor, "setBarColor(QString widget, QString Color)",  i18n("Sets the ProgresBar color"), 2);
+  KommanderPlugin::registerFunction(PB_setHightlightTextColor, "setBarTextColor(QString widget, QString Color)",  i18n("Sets the ProgresBar text color"), 2);
 }
 
 ProgressBar::~ProgressBar()
@@ -82,7 +94,7 @@
 
 bool ProgressBar::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::clear || f == DCOP::setMaximum;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::clear || f == DCOP::setMaximum || f == DCOP::geometry || (f > FirstFunction && f < LastFunction);
 }
 
 QString ProgressBar::handleDCOP(int function, const QStringList& args)
@@ -99,6 +111,30 @@
     case DCOP::setMaximum:
       setTotalSteps(args[0].toUInt());
       break;
+    case DCOP::geometry:
+    {
+      QString geo = QString::number(this->x())+" "+QString::number(this->y())+" "+QString::number(this->width())+" "+QString::number(this->height());
+      return geo;
+      break;
+    }
+    case PB_setHighlightColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      QPalette p = this->palette();
+      p.setColor(QPalette::Active, QColorGroup::Highlight, color);
+      this->setPalette( p, TRUE );
+      break;
+    }
+    case PB_setHightlightTextColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      QPalette p = this->palette();
+      p.setColor(QPalette::Active, QColorGroup::HighlightedText, color);
+      this->setPalette( p, TRUE );
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/scriptobject.cpp
===================================================================
--- kommander/widgets/scriptobject.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/scriptobject.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -126,6 +126,14 @@
   executeProcess(true);
 }
 
+void ScriptObject::execute(const QString& s1, const QString& s2)
+{
+  m_params.clear();
+  m_params.append(s1);
+  m_params.append(s2);
+  executeProcess(true);
+}
+
 void ScriptObject::execute(int i)
 {
   m_params.clear();
Index: kommander/widgets/treewidget.h
===================================================================
--- kommander/widgets/treewidget.h	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/treewidget.h	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -68,6 +68,7 @@
   void showEvent(QShowEvent *e);
   void contextMenuEvent( QContextMenuEvent * e );
   int itemToIndex(QListViewItem* item);
+  int itemToIndexSafe(QListViewItem* item);
   QString itemText(QListViewItem* item) const;
   QString itemsText();
   QListViewItem* indexToItem(int index);
Index: kommander/widgets/label.cpp
===================================================================
--- kommander/widgets/label.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/label.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -88,7 +88,7 @@
 
 bool Label::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::clear;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::clear || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 QString Label::handleDCOP(int function, const QStringList& args)
@@ -102,6 +102,16 @@
     case DCOP::clear:
       setWidgetText("");
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/listbox.cpp
===================================================================
--- kommander/widgets/listbox.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/listbox.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -96,7 +96,7 @@
   return f == DCOP::text || f == DCOP::setText || f == DCOP::selection || f == DCOP::setSelection ||
     f == DCOP::insertItems || f == DCOP::insertItem || f == DCOP::removeItem || f == DCOP::clear ||
     f == DCOP::currentItem || f == DCOP::setCurrentItem || f == DCOP::item || f == DCOP::addUniqueItem ||
-      f == DCOP::findItem || f == DCOP::setPixmap || f == DCOP::count || f == DCOP::geometry || f == DCOP::hasFocus;
+      f == DCOP::findItem || f == DCOP::setPixmap || f == DCOP::count || f == DCOP::geometry || f == DCOP::hasFocus || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 void ListBox::contextMenuEvent( QContextMenuEvent * e )
@@ -206,6 +206,16 @@
     case DCOP::hasFocus:
       return QString::number(this->hasFocus());
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/checkbox.cpp
===================================================================
--- kommander/widgets/checkbox.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/checkbox.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -102,7 +102,7 @@
 
 bool CheckBox::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::checked || f == DCOP::setChecked;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::checked || f == DCOP::setChecked || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 void CheckBox::contextMenuEvent( QContextMenuEvent * e )
@@ -125,6 +125,16 @@
     case DCOP::setChecked:
       setChecked(args[0] != "false" && args[0] != "0");
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/buttongroup.cpp
===================================================================
--- kommander/widgets/buttongroup.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/buttongroup.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -97,7 +97,7 @@
 
 bool ButtonGroup::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::checked || f == DCOP::setChecked;
+  return f == DCOP::text || f == DCOP::checked || f == DCOP::setChecked || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
     
 
@@ -118,6 +118,16 @@
       setCheckable(true);
       setChecked(args[0] != "false");
       break;
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }
Index: kommander/widgets/radiobutton.cpp
===================================================================
--- kommander/widgets/radiobutton.cpp	(.../tags/KDE/3.5.10/kdewebdev)	(revision 965170)
+++ kommander/widgets/radiobutton.cpp	(.../branches/KDE/3.5/kdewebdev)	(revision 965170)
@@ -101,7 +101,7 @@
 
 bool RadioButton::isFunctionSupported(int f)
 {
-  return f == DCOP::text || f == DCOP::setText || f == DCOP::setChecked || f == DCOP::checked;
+  return f == DCOP::text || f == DCOP::setText || f == DCOP::setChecked || f == DCOP::checked || f == DCOP::getBackgroundColor || f == DCOP::setBackgroundColor;
 }
 
 QString RadioButton::handleDCOP(int function, const QStringList& args)
@@ -117,6 +117,16 @@
       break;
     case DCOP::checked:
       return QString::number(isOn());
+    case DCOP::getBackgroundColor:
+      return this->paletteBackgroundColor().name();
+      break;
+    case DCOP::setBackgroundColor:
+    {
+      QColor color;
+      color.setNamedColor(args[0]);
+      this->setPaletteBackgroundColor(color);
+      break;
+    }
     default:
       return KommanderWidget::handleDCOP(function, args);
   }

Property changes on: .
___________________________________________________________________
Deleted: svn:mergeinfo
Added: svn:externals
   + admin https://svn.kde.org/home/kde/branches/KDE/3.5/kde-common/admin


